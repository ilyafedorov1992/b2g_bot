
import os
import json
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑ JSON
with open("bot_structure.json", encoding="utf-8") as f:
    bot_data = json.load(f)

TOKEN = os.environ.get("BOT_TOKEN")
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://–Ω–∞–∑–≤–∞–Ω–∏–µ-—Å–∞–π—Ç–∞.onrender.com/webhook/–¢–û–ö–ï–ù

app = Flask(__name__)

@app.route("/")
def index():
    return "–ë–æ—Ç –Ω–∞ Webhook –∞–∫—Ç–∏–≤–µ–Ω!"

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è ‚Üí –£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –†–ö–û", callback_data="–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è>–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –†–ö–û")],
        [InlineKeyboardButton("–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è ‚Üí –ë–ì", callback_data="–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è>–ë–ì")],
        [InlineKeyboardButton("–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è ‚Üí –ö—Ä–µ–¥–∏—Ç—ã", callback_data="–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è>–ö—Ä–µ–¥–∏—Ç—ã")],
        [InlineKeyboardButton("–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è ‚Üí –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—á–µ—Ç–∞", callback_data="–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è>–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—á–µ—Ç–∞")],
        [InlineKeyboardButton("–ü—Ä–æ–¥—É–∫—Ç ‚Üí –ë–ì", callback_data="–ü—Ä–æ–¥—É–∫—Ç>–ë–ì")],
        [InlineKeyboardButton("–ü—Ä–æ–¥—É–∫—Ç ‚Üí –û–±–æ—Ä–æ—Ç–Ω—ã–π –∫—Ä–µ–¥–∏—Ç", callback_data="–ü—Ä–æ–¥—É–∫—Ç>–û–±–æ—Ä–æ—Ç–Ω—ã–π –∫—Ä–µ–¥–∏—Ç")],
        [InlineKeyboardButton("–ü—Ä–æ–¥—É–∫—Ç ‚Üí –ö–õ–ò–ö", callback_data="–ü—Ä–æ–¥—É–∫—Ç>–ö–õ–ò–ö")],
        [InlineKeyboardButton("–ü—Ä–æ–¥—É–∫—Ç ‚Üí –°—á–µ—Ç", callback_data="–ü—Ä–æ–¥—É–∫—Ç>–°—á–µ—Ç")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    selected = query.data

    if selected == "BACK_TO_MAIN":
        await start(update, context)
        return

    parts = selected.split(">")
    node = bot_data
    try:
        for part in parts:
            node = node[part]

        if isinstance(node, list):
            text = ""
            for entry in node:
                text += f"‚ùì <b>{entry.get('formulirovka')}</b>\n"
                for answer in entry.get("otvety", []):
                    text += f"üí¨ {answer}\n"
                text += "\n"
            await query.edit_message_text(text.strip(), parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="BACK_TO_MAIN")]]))
        elif isinstance(node, dict):
            keyboard = [
                [InlineKeyboardButton(text=k, callback_data=selected + ">" + k)]
                for k in node.keys()
            ]
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="BACK_TO_MAIN")])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    except:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")

# --- Flask endpoint –¥–ª—è Telegram ---
@app.post(WEBHOOK_PATH)
def webhook() -> str:
    application.update_queue.put_nowait(Update.de_json(request.get_json(force=True), application.bot))
    return "ok"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ Webhook ---
async def setup():
    await application.bot.set_webhook(f"{WEBHOOK_URL}{WEBHOOK_PATH}")

application = ApplicationBuilder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(handle_callback))

if __name__ == "__main__":
    import asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(setup())
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
