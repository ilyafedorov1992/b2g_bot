
from flask import Flask
import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

app = Flask(__name__)

@app.route('/')
def home():
    return 'Hello from Render!'

# --- –ú–µ–Ω—é –ª–æ–≥–∏–∫–∞ ---

main_menu = [["–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è"], ["–ü—Ä–æ–¥—É–∫—Ç—ã"]]

submenu = {
    "–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è": [["–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –†–ö–û"], ["–ë–ì"], ["–ö—Ä–µ–¥–∏—Ç—ã"], ["–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—á—ë—Ç–∞"]],
    "–ü—Ä–æ–¥—É–∫—Ç—ã": [["–ë–ì"], ["–û–±–æ—Ä–æ—Ç–Ω—ã–π –∫—Ä–µ–¥–∏—Ç"], ["–ö–õ–ò–ö"], ["–°—á—ë—Ç"]],
}

# --- Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup
    )

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text in submenu:
        reply_markup = ReplyKeyboardMarkup(submenu[text], resize_keyboard=True)
        await update.message.reply_text(f"–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ ¬´{text}¬ª:", reply_markup=reply_markup)

    elif any(text in row for row in submenu.values()):
        await update.message.reply_text(f"üîß –û—Ç–≤–µ—Ç –¥–ª—è ¬´{text}¬ª –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç!")

    else:
        reply_markup = ReplyKeyboardMarkup(main_menu, resize_keyboard=True)
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é üëá", reply_markup=reply_markup)

# --- Bot setup ---

async def main():
    token = os.environ.get("BOT_TOKEN")
    if not token:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = ApplicationBuilder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

    await application.initialize()
    await application.bot.delete_webhook(drop_pending_updates=True)
    await application.start()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.updater.start_polling()

# --- Entry point ---

if __name__ == '__main__':
    import threading

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get("PORT", 5000))
    threading.Thread(target=lambda: app.run(host='0.0.0.0', port=port)).start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
