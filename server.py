
from flask import Flask
import os
import asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

app = Flask(__name__)

@app.route('/')
def home():
    return 'Hello from Render!'

# --- Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è"], ["–ü—Ä–æ–¥—É–∫—Ç—ã"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã –ü–æ—á—Ç–∏ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ. –í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ü—Ä–æ–¥—É–∫—Ç—ã":
        keyboard = [["–ë–ì"], ["–û–±–æ—Ä–æ—Ç–Ω—ã–π –∫—Ä–µ–¥–∏—Ç"], ["–ö–õ–ò–ö"], ["–°—á–µ—Ç"], ["–ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=reply_markup)

    elif text == "–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è":
        keyboard = [["–£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –†–ö–û"], ["–ë–ì"], ["–ö—Ä–µ–¥–∏—Ç—ã"], ["–û—Ç–∫—Ä—ã—Ç–∏–µ —Å—á–µ—Ç–∞"], ["–ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π:", reply_markup=reply_markup)

    elif text == "–ù–∞–∑–∞–¥":
        await start(update, context)

    else:
        await update.message.reply_text("–ü–æ–∫–∞ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ ‚Äî –Ω–∞–ø–æ–ª–Ω–∏–º –≤–º–µ—Å—Ç–µ üíõ")

# --- Bot setup ---

async def main():
    token = os.environ.get("BOT_TOKEN")
    if not token:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    application = ApplicationBuilder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

    await application.initialize()
    await application.start()
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await application.updater.start_polling()

# --- Entry point ---

if __name__ == '__main__':
    import threading

    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get("PORT", 5000))
    threading.Thread(target=lambda: app.run(host='0.0.0.0', port=port)).start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_forever()
