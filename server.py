from flask import Flask
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
import threading

app = Flask(__name__)

@app.route('/')
def home():
    return 'Hello from Render!'

# --- Bot Handlers ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ"], ["–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è"], ["–ü—Ä–æ–¥—É–∫—Ç—ã"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! –Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ü–æ—á—Ç–∏ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ.", reply_markup=reply_markup)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "–ü—Ä–æ–¥—É–∫—Ç—ã":
        keyboard = [["–°—á–µ—Ç"], ["–£—Ç–∏–ª—å –†–ö–û"], ["–ë–ì"], ["–û–ö"], ["–ö–õ–ò–ö"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=reply_markup)

    elif text == "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ":
        keyboard = [["–•–æ–ª–æ–¥–Ω—ã–π_–ü—Ä–æ–¥–∞–∂–∞"], ["–•–æ–ª–æ–¥–Ω—ã–π_–ö–ü"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

    elif text == "–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è":
        keyboard = [
            ["–°—á–µ—Ç"],
            ["–£—Ç–∏–ª—å –†–ö–û"],
            ["–ë–ì"],
            ["–û–ö", "–º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞", "–Ω–µ –æ–¥–æ–±—Ä—è—Ç"],
            ["–ö–õ–ò–ö", "–º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞", "–Ω–µ –æ–¥–æ–±—Ä—è—Ç"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç –∏ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ:", reply_markup=reply_markup)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é üëá")

# --- Bot Starter Function (safe threading) ---

def start_bot():
    async def main():
        token = os.environ.get("BOT_TOKEN")
        if not token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        application = ApplicationBuilder().token(token).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
        await application.run_polling()

    asyncio.run(main())

# --- Main ---

if __name__ == '__main__':
    threading.Thread(target=lambda: app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))).start()
    threading.Thread(target=start_bot).start()
